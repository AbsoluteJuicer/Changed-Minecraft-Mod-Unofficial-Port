plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.185'
}

tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
	flatDir {
        dir 'libs'
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev/"
    }
    maven { url "https://maven.theillusivec4.top/" }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://cursemaven.com/" }
}

base {
    archivesName = mod_id
}

// Mojang ships Java 21 to end users starting in 1.20.5, so mods should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

jarJar.enable()

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        argument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        arguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

mixin {
    add sourceSets.main, "changed.refmap.json"

    config "changed.mixins.json"
    config "changed.compatibility.mixins.json"
}

dependencies {
    // Specify the version of Minecraft to use.
    // Depending on the plugin applied there are several options. We will assume you applied the userdev plugin as shown above.
    // The group for userdev is net.neoforged, the module name is neoforge, and the version is the same as the neoforge version.
    // You can however also use the vanilla plugin (net.neoforged.gradle.vanilla) to use a version of Minecraft without the neoforge loader.
    // And its provides the option to then use net.minecraft as the group, and one of; client, server or joined as the module name, plus the game version as version.
    // For all intends and purposes: You can treat this dependency as if it is a normal library you would use.
    implementation "net.neoforged:neoforge:${neo_version}"

	// Annotation processors
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    annotationProcessor project(':ap')

    // MixinExtras
    compileOnly "io.github.llamalad7:mixinextras-common:0.4.1"
    implementation jarJar("io.github.llamalad7:mixinextras-forge:0.4.1") {
      jarJar.ranged(it, "[0.4.1,)")
    }
    
    // Example optional mod dependency with JEI
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    compileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
    compileOnly "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"
    // We add the full version to localRuntime, not runtimeOnly, so that we do not publish a dependency on it
    localRuntime "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"
	implementation "me.shedaniel:RoughlyEnoughItems-neoforge:${reiVersion}"
    implementation "me.shedaniel.cloth:cloth-config-neoforge:${clothVersion}"
    implementation "dev.architectury:architectury-neoforge:${archVersion}"
	
	
	// Curse Maven mod dependencies
    implementation "curse.maven:spark-361579:6225208"
    implementation "curse.maven:modernfix-790626:6609557"
    implementation "curse.maven:embeddium-908741:6118392"
    implementation "curse.maven:oculus-1200907:6394928"
    implementation "curse.maven:vivecraft-667903:6208701"
    runtimeOnly "curse.maven:ferritecore-429235:5850121"
	
	compileOnly "curse.maven:selene-499980:6612980"
    compileOnly "curse.maven:balm-531761:6588901"
    compileOnly "curse.maven:hardcore-revival-274036:6411488"
    compileOnly "curse.maven:pehkui-319596:5446174"
	
    compileOnly "dev.tr7zw:notenoughanimations-neoforge-1.9.3-mc1.21:1.9.3"
    compileOnly "dev.tr7zw:firstperson-neoforge-2.4.9-mc1.21:2.4.9"
	
    compileOnly "curse.maven:framework-549225:6531439"
    //compileOnly "curse.maven:mrcrayfishs-gun-mod-289479:4344223"
    implementation "curse.maven:playeranimator-658587:6024462"
    runtimeOnly "curse.maven:better-combat-by-daedelus-639842:6532547"
    compileOnly "curse.maven:stellaris-1036270:6628865"
    compileOnly "curse.maven:carry-on-274259:5649344"
    //compileOnly "curse.maven:leashed-376861:3614245"
    compileOnly "curse.maven:ctm-267602:5587515"
    compileOnly "curse.maven:chisels-bits-231095:6370922"
    compileOnly "curse.maven:what-are-they-up-to-945479:6418577"
    //compileOnly "curse.maven:originsforge-474438:5179273"
    //compileOnly "curse.maven:forgery-434087:5669989"
    compileOnly "curse.maven:do-a-barrel-roll-663658:6189476"
    compileOnly "curse.maven:entity-texture-features-fabric-568563:5982151"
    compileOnly "curse.maven:entity-model-features-844662:6001147"
    //compileOnly "curse.maven:timeless-and-classics-zero-1028108:6069322"
    compileOnly "curse.maven:parcool-482378:6652975"
	
    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation "blank:coolmod-${mc_version}:${coolmod_version}"

    // Example mod dependency using a file as dependency
    // implementation files("libs/coolmod-${mc_version}-${coolmod_version}.jar")

    // Example project dependency using a sister or child project:
    // implementation project(":myproject")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
